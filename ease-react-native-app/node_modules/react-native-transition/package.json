{
  "_args": [
    [
      {
        "raw": "react-native-transition@^1.1.8",
        "scope": null,
        "escapedName": "react-native-transition",
        "name": "react-native-transition",
        "rawSpec": "^1.1.8",
        "spec": ">=1.1.8 <2.0.0",
        "type": "range"
      },
      "/Users/thomas/EASE-PROJECT/ease-react-native-app"
    ]
  ],
  "_from": "react-native-transition@>=1.1.8 <2.0.0",
  "_id": "react-native-transition@1.1.8",
  "_inCache": true,
  "_location": "/react-native-transition",
  "_nodeVersion": "8.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-transition-1.1.8.tgz_1504844015953_0.575458231382072"
  },
  "_npmUser": {
    "name": "syaau",
    "email": "ranjan@sharingapples.com"
  },
  "_npmVersion": "5.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-transition@^1.1.8",
    "scope": null,
    "escapedName": "react-native-transition",
    "name": "react-native-transition",
    "rawSpec": "^1.1.8",
    "spec": ">=1.1.8 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-transition/-/react-native-transition-1.1.8.tgz",
  "_shasum": "72413b0a2f3fc41caf19a9abe9505ae959671398",
  "_shrinkwrap": null,
  "_spec": "react-native-transition@^1.1.8",
  "_where": "/Users/thomas/EASE-PROJECT/ease-react-native-app",
  "author": {
    "name": "Ranjan Shrestha"
  },
  "bugs": {
    "url": "https://github.com/sharingapples/react-native-transition/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.10"
  },
  "description": "A view transition library for react-native",
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-eslint": "^7.1.1",
    "babel-preset-react-native": "^1.9.1",
    "eslint": "^3.15.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.9.0",
    "rimraf": "^2.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-N6nE/TCXG/OVda/UhhfFL33iSw0O/1Wcr32WhrBYutGr9lKIOr2+WNr/BoAiNaDpYvjKQ9R3vp5HW8W/yVn01g==",
    "shasum": "72413b0a2f3fc41caf19a9abe9505ae959671398",
    "tarball": "https://registry.npmjs.org/react-native-transition/-/react-native-transition-1.1.8.tgz"
  },
  "files": [
    "lib",
    "doc"
  ],
  "gitHead": "5b91848be1c6e2dede6eba459777e0aa4731f949",
  "homepage": "https://github.com/sharingapples/react-native-transition#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "syaau",
      "email": "ranjan@sharingapples.com"
    }
  ],
  "name": "react-native-transition",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15.0.0",
    "react-native": ">=0.40.0"
  },
  "readme": "# react-native-transition\nA fully customizable view transition library for react-native. The library\ncould be used to transition entire screens or small parts within a View.\n\nThe library has been designed to use customizable transition styles, that\ncould be easily created and plugged into the application. Checkout the\n[Custom Transitions](#custom-transitions) section to learn more about creating\ntransitions.\n\nCheck out a demo application available at\n[Transition Demo](https://github.com/sharingapples/react-native-transition-demo).  \n![Demo Animation](./docs/demo.gif)\n\n### Caution\nThe react-native library below 0.43 throws `onLayout` event on Android for every change\nin the child UI elements (even when changes are made through setNativeProps) even\nwhen the parent's layout is unaffected. This problem is specially observable while using\ndrag & drop libraries, wherein this even is called a lot, affecting the performance. So\nuse caution while using this library on React Native versions below 0.43.\n\n### Installation\n` $ npm install --save react-native-transition`\n\n### Usage\n\n1. Import `createTransition` and transition styles from the library  \n   <code>import { createTransition, FlipX } from 'react-native-transition';</code>\n\n2. Create a transition component with optional styles  \n   <code>const Transition = createTransition(FlipX);</code>\n\n3. Render the initial view within the `Transition` component  \n   <code>\n   &lt;Transition&gt;\n   &lt;View&gt;...&lt;View&gt;\n   &lt;/Transition&gt;\n   </code>\n\n4. Use the show method from component to perform transition  \n   <code>\n     onPress = (e) => { Transition.show(&lt;View&gt; ... &lt;/View&gt;); }\n   </code>\n\n#### Example\n```javascript\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nimport { createTransition, FlipX } from 'react-native-transition';\n\nconst Transition = createTransition(FlipX);\n\nclass YourView extends Component {\n  this.switch = () => {\n    Transition.show(\n      <View style={{ flex: 1, alignItems: 'center' }}>\n        <Text>This is another view</Text>\n      </View>\n    );\n  }\n\n  render() {\n    return (\n      <Transition>\n        <View style={{ flex: 1, alignItems: 'center' }}>\n          <Text>This the initial View</Text>\n          <Button title=\"Press to Switch\" onPress={this.switch} />\n        </View>\n      </Transition>\n    );\n  }\n}\n```\n\nFor a more complete example, checkout [Demo.js](https://github.com/sharingapples/react-native-transition-demo/tree/master/src/Demo.js)\nand [Window.js](https://github.com/sharingapples/react-native-transition-demo/tree/master/src/Window.js) from\n[react-native-transition-demo](https://github.com/sharingapples/react-native-transition-demo).\n\n### createTransition([style], [animation])\nCreates a Transition component used for providing transitionable view.\n\n#### Arguments\n1. `style` (object): A transition style definition object. Stock transition styles - `Fade`,\n`FlipX`, `FlipY`, `SlideLeft`, `SlideRight`, `SlideUp`, `SlideDown` are available\nwith the libraries. By default `Fade` transition is used.\n\n2. `animation` (function): Animation used for performing the transition. It could\nbe one of the `Animated.timing`, `Animated.spring` or `Animated.decay` provided\nby react-native animation library.\n\n### Transition component\nThe `Transition` component should have **one and only one element** as a child.\nThis child element is rendered before any transition takes place. Once the\ntransition has occured, this initial child would not be mounted.\n\n#### Methods\n**show(element, [style], [animation])**\nThe `show` method triggers the transition with the provided element appearing\nthrough transition.\n\nThis method is available both as static as well as instance method of the\ncomponent. In most of the cases, the static method could be used, while for\nsome advanced use cases where the Transition component is placed on inner\nviews and are being transitioned on automatic intervals, instance method\ncould be used for a much individual instance access through `refs`.\n\n**getBounds()**\nRetreive the bounding size of the Transition componet. It returns an object\nwith { width, height }. The bounding size is not available until the component\nhas been attached.\n\n**Arguments**\n> **element** *(Element)*: The element that needs to be rendered via transition.  \n> **style** *(object)*: Override the transition style for this specific transition.  \n> **animation** *(function)*: Override the transition animation for this specific transition.  \n\n**Returns** A unique id that represents the transition of this particular element which\ncould be used to track the completion of the transition.\n\n> *Note: In case an element is added faster than being transitioned in. The visual\ntransition will be skipped for the intermediate elements. The `onTransitioned` callback\nhowever will be called for all the elements even those skipped in the order that\nthey were supposed to be shown*\n\n#### Props\n**onTransitioned**: A function which is called for every item that has been shown\nwith the transition. The function is called with the **uniqueId** returned by `show`\nmethod.\n\n**onLayout**: A function which is called when the transition layout is\navailable with the bounds. Every time the layout changes, this method is invoked.\n\nAny other props passed to the `Transition` component is passed as `config` parameter\nto the `animation` function. If you are using a `Animated.timing` animation, you\ncould pass `duration` or `easing` props and so on.\n\n### Custom Transitions\nThe transition library comes with stock transitions which are limited, but\ncan be easily extended by creating your own custom transitions. However, you must\nhave knowledge of how animation works in react-native.\n\nA transition object should have two properties - `out` and `in`. The `out`\nproperty creates the style required for the view that is transitioning out\nand the `in` property creates the same for the incoming view. Both the `in`\nand `out` properties should be function call that returns a new style object\nfor the respective container view. The function has following parameters:\n> **value** (`Animated.Value`)  \n> An animated value that runs from `0` to `1` during the transition. The\nvarious style attributes take interpolated values from this value. Go\nthrough the react-native Animation docs for details on using interpolation.\n>\n> **bounds** ({ width, height })  \n> Some animation styles need to know the size of the view being transitioned.\n>\n> **props**\n> The props that was passed to the `Transition` component.\n\n#### Supporting Native Transitions\nSince react native v0.40+, the native animation support has been provided.\nThe transitions can now define, `useNativeDriver` property with boolean\n`true` to support native animation. Take caution, as all styles are not\nsupported for native animation. Only `opacity`, `backgroundColor` and \n`transform` properties are supported for now. If the `useNativeDriver` is\nenabled on transition styles that changes any other properties, an \nexception would be thrown. `Fade`, `FlipX`, `FlipY` are the stock styles\nthat now support native animations.\n\n#### Example transition - Slide\n```javascript\nconst Slide = {\n  out: (value, bounds) => ({\n    left: value.interpolate({\n      inputValue: [0, 1],\n      outputValue: [0, -bounds.width],\n    }),\n    width: bounds.width,\n  }),\n  in: (value, bounds) => ({\n    left: value.interpolate({\n      inputValue: [0, 1],\n      outputValue: [bounds.width, 0],\n    }),\n    width: bounds.width,\n  }),\n};\n```\n\n#### Example transition - Brooom\n```javascript\nconst Brooom = {\n  out: (value, bounds) => ({\n    left: value.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, -bounds.width],\n    }),\n    width: bounds.width,\n    transform: [{\n      skewX: value.interpolate({\n        inputRange: [0, 0.1, 0.9, 1],\n        outputRange: [\"0deg\", \"-20deg\", \"-20deg\", \"0deg\"],\n      }),\n    }],\n  }),\n  in: (value, bounds) => ({\n    left: value.interpolate({\n      inputRange: [0, 1],\n      outputRange: [bounds.width, 0],\n    }),\n    width: bounds.width,\n    transform: [{\n      skewX: value.interpolate({\n        inputRange: [0, 0.1, 0.9, 1],\n        outputRange: [\"0deg\", \"-20deg\", \"-20deg\", \"0deg\"],\n      }),\n    }],\n  }),\n};\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sharingapples/react-native-transition.git"
  },
  "scripts": {
    "build": "babel --out-dir lib --ignore __tests__ src --source-maps",
    "clean": "rimraf lib && mkdir lib",
    "prepublish": "rimraf lib && babel --out-dir lib --ignore __tests__ src"
  },
  "version": "1.1.8"
}
