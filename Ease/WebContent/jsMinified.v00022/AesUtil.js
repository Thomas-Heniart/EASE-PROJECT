var AesUtil=function(t,e){this.keySize=4,this.iterationCount=1e4,this.salt=t,this.passphrase=e,this.key=this.generateKey(this.salt,this.passphrase)};AesUtil.prototype.generateKey=function(t,e){return CryptoJS.PBKDF2(e,CryptoJS.enc.Hex.parse(t),{keySize:this.keySize,iterations:this.iterationCount})},AesUtil.prototype.encrypt=function(t,e){return CryptoJS.AES.encrypt(t,this.key,{iv:CryptoJS.enc.Hex.parse(e)}).ciphertext.toString(CryptoJS.enc.Base64)},AesUtil.prototype.decrypt=function(t,e){var r=this.generateKey(this.salt,this.passphrase),n=CryptoJS.lib.CipherParams.create({ciphertext:CryptoJS.enc.Base64.parse(e)});return CryptoJS.AES.decrypt(n,r,{iv:CryptoJS.enc.Hex.parse(t)}).toString(CryptoJS.enc.Utf8)},AesUtil.prototype.generateIv=function(){return CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Hex)};var aesUtils,RSAEncryption=new JSEncrypt({default_key_size:1024}),serverRSAEncryption=new JSEncrypt({default_key_size:1024});$(document).ready(function(){$.get("/api/v1/common/GetServerKey",{public_key:RSAEncryption.getPublicKeyB64()},function(t){var e;e=(e="-----BEGIN PUBLIC KEY-----\n"+(e=t.publicKey)).substring(0,91)+"\n"+e.substring(91,155)+"\n"+e.substring(155,219)+"\n"+e.substring(219,e.length)+"\n-----END PUBLIC KEY-----",serverRSAEncryption.setKey(e)})});