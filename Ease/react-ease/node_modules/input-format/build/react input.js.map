{"version":3,"sources":["../source/react input.js"],"names":["ReactInput","props","get_input_element","findDOMNode","input","on_blur","event","onBlur","_event","target","value","input_controller","getParsedValue","stopPropagation","preventDefault","on_key_down","onKeyDown","parse","format","onChange","rest","ref","undefined","text","onPaste","onCut","focus","Component","propTypes","func","isRequired","type","string","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,U;;;AAkCpB,qBAAYC,KAAZ,EACA;AAAA;;AAAA,4IACOA,KADP;;AAAA,QA0BAC,iBA1BA,GA0BoB,YACpB;AACC,UAAO,mBAASC,WAAT,CAAqB,MAAKC,KAA1B,CAAP;AACA,GA7BD;;AAAA,QAgCAC,OAhCA,GAgCU,UAACC,KAAD,EACV;AAAA,OACSC,MADT,GACoB,MAAKN,KADzB,CACSM,MADT;;AAGC;AACA;AACA;;AACA,OAAIA,MAAJ,EACA;AACC,QAAMC,oCAEFF,KAFE;AAGLG,wCAEIH,MAAMG,MAFV;AAGCC,aAAO,MAAKC,gBAAL,CAAsBC,cAAtB,GAAuCF;AAH/C;AAHK,MAAN;;AAUA;AACA;AACAF,WAAOK,eAAP,GAAyBP,MAAMO,eAA/B;AACAL,WAAOM,cAAP,GAAyBR,MAAMQ,cAA/B;;AAEAP,WAAOC,MAAP;AACA;AACD,GA1DD;;AAAA,QA4DAO,WA5DA,GA4Dc,UAACT,KAAD,EACd;AAAA,OACSU,SADT,GACuB,MAAKf,KAD5B,CACSe,SADT;;;AAGC,OAAIA,SAAJ,EACA;AACCA,cAAUV,KAAV;AACA;;AAED,SAAKK,gBAAL,CAAsBK,SAAtB,CAAgCV,KAAhC;AACA,GAtED;;AAAA,oBAGqC,MAAKL,KAH1C;AAAA,MAGSgB,KAHT,eAGSA,KAHT;AAAA,MAGgBC,MAHhB,eAGgBA,MAHhB;AAAA,MAGwBC,QAHxB,eAGwBA,QAHxB;;;AAKC,QAAKR,gBAAL,GAAwB,8BAAqB,MAAKT,iBAA1B,EAA6Ce,KAA7C,EAAoDC,MAApD,EAA4DC,QAA5D,CAAxB;AALD;AAMC;;;;2BAGD;AAAA;;AAAA,gBAC2C,KAAKlB,KADhD;AAAA,OACSS,KADT,UACSA,KADT;AAAA,OACgBO,KADhB,UACgBA,KADhB;AAAA,OACuBC,MADvB,UACuBA,MADvB;AAAA,OACkCE,IADlC;;;AAGC,UACC,kEACKA,IADL;AAEC,SAAM;AAAA,YAAO,OAAKhB,KAAL,GAAaiB,IAApB;AAAA,KAFP;AAGC,WAAQH,OAAQR,UAAUY,SAAV,IAAuBZ,UAAU,IAAlC,GAA0C,EAA1C,GAA+CA,KAAtD,EAA6Da,IAHtE;AAIC,eAAY,KAAKR,WAJlB;AAKC,cAAW,KAAKJ,gBAAL,CAAsBQ,QALlC;AAMC,aAAU,KAAKR,gBAAL,CAAsBa,OANjC;AAOC,WAAQ,KAAKb,gBAAL,CAAsBc,KAP/B;AAQC,YAAS,KAAKpB,OARf,IADD;AAWA;;AAED;;;AAMA;;;;0BA0CA;AACC,QAAKH,iBAAL,GAAyBwB,KAAzB;AACA;;;EA9GsC,gBAAMC,S;;AAAzB3B,U,CAEb4B,S,GACP;AACC;AACAX,QAAS,oBAAUY,IAAV,CAAeC,UAFzB;;AAIC;AACAZ,SAAS,oBAAUW,IAAV,CAAeC,UALzB;;AAOC;AACAC,OAAO,oBAAUC,MAAV,CAAiBF,UARzB;;AAUC;AACApB,QAAS,oBAAUsB,MAXpB;;AAaC;AACAb,WAAW,oBAAUU,IAAV,CAAeC,UAd3B;;AAgBC;AACA;AACA;AACAvB,SAAS,oBAAUsB,IAnBpB;;AAqBC;AACAb,YAAY,oBAAUa;AAtBvB,C;AAHoB7B,U,CA4BbiC,Y,GACP;AACC;AACAF,OAAO;AAFR,C;kBA7BoB/B,U","file":"react input.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\n\nimport Input_controller from './input controller'\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nexport default class ReactInput extends React.Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Parses a single characher of `<input/>` text\n\t\tparse  : PropTypes.func.isRequired,\n\n\t\t// Formats `value` into `<input/>` text\n\t\tformat : PropTypes.func.isRequired,\n\n\t\t// `<input/>` `type` attribute\n\t\ttype : PropTypes.string.isRequired,\n\n\t\t// Is parsed from <input/> text\n\t\tvalue  : PropTypes.string,\n\n\t\t// This handler is called each time `<input/>` text is changed\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t\t// not the formatted text.\n\t\tonBlur : PropTypes.func,\n\n\t\t// Passthrough\n\t\tonKeyDown : PropTypes.func\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// `<input/>` `type` attribute\n\t\ttype : 'text'\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst { parse, format, onChange } = this.props\n\n\t\tthis.input_controller = new Input_controller(this.get_input_element, parse, format, onChange)\n\t}\n\n\trender()\n\t{\n\t\tconst { value, parse, format, ...rest } = this.props\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\t{...rest}\n\t\t\t\tref={ ref => this.input = ref }\n\t\t\t\tvalue={ format((value === undefined || value === null) ? '' : value).text }\n\t\t\t\tonKeyDown={ this.on_key_down }\n\t\t\t\tonChange={ this.input_controller.onChange }\n\t\t\t\tonPaste={ this.input_controller.onPaste }\n\t\t\t\tonCut={ this.input_controller.onCut }\n\t\t\t\tonBlur={ this.on_blur }/>\n\t\t)\n\t}\n\n\t// Returns <input/> DOM Element\n\tget_input_element = () =>\n\t{\n\t\treturn ReactDOM.findDOMNode(this.input)\n\t}\n\n\t// This handler is a workaround for `redux-form`\n\ton_blur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t// `event.target.value` in its `onBlur` handler.\n\t\tif (onBlur)\n\t\t{\n\t\t\tconst _event =\n\t\t\t{\n\t\t\t\t...event,\n\t\t\t\ttarget:\n\t\t\t\t{\n\t\t\t\t\t...event.target,\n\t\t\t\t\tvalue: this.input_controller.getParsedValue().value\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t_event.stopPropagation = event.stopPropagation\n\t\t\t_event.preventDefault  = event.preventDefault\n\n\t\t\tonBlur(_event)\n\t\t}\n\t}\n\n\ton_key_down = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\n\t\tthis.input_controller.onKeyDown(event)\n\t}\n\n\tfocus()\n\t{\n\t\tthis.get_input_element().focus()\n\t}\n}"]}