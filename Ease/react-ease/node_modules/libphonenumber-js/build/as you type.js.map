{"version":3,"sources":["../source/as you type.js"],"names":["close_dangling_braces","count_occurences","repeat","DUMMY_DIGIT","DUMMY_DIGIT_MATCHER","RegExp","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","DIGIT_PLACEHOLDER_MATCHER_GLOBAL","CHARACTER_CLASS_PATTERN","STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","as_you_type","country_code","metadata","Error","countries","default_country","reset","text","extracted_number","indexOf","current_output","process_input","input","parsed_input","reset_countriness","slice","national_number","is_international","country_phone_code","extract_country_phone_code","initialize_phone_number_formats_for_this_country_phone_code","reset_format","determine_the_country","country","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","available_formats","should_format","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","template","length","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","formatted_number","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","undefined","reset_country","country_metadata","phone_code","partially_populated_template","last_match_position","filter","format","test","leading_digits","index_of_leading_digits_pattern","leading_digits_pattern_count","leading_digits_pattern_index","Math","min","leading_digits_pattern","matcher","validate_format","create_formatting_template","full_number","replace","formatted_national_number","number","national_prefix_formatting_rule","number_pattern","dummy_phone_number_matching_format_pattern","match","number_format","get_format_format","digits","digit","search","cut_before","retained_template","opening_braces","closing_braces","dangling_braces","symbol","string","count","character","times","result"],"mappings":"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","file":"as you type.js","sourcesContent":["// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n\nimport\n{\n\tget_phone_code,\n\tget_national_prefix,\n\tget_national_prefix_for_parsing,\n\tget_formats,\n\tget_format_pattern,\n\tget_format_format,\n\tget_format_international_format,\n\tget_format_national_prefix_formatting_rule,\n\tget_format_national_prefix_is_mandatory_when_formatting,\n\tget_format_leading_digits_patterns,\n\tget_format_uses_national_prefix,\n\tget_metadata_by_country_phone_code\n}\nfrom './metadata'\n\nimport\n{\n\tVALID_PUNCTUATION,\n\tPLUS_CHARS,\n\tVALID_DIGITS,\n\textract_formatted_phone_number,\n\tparse_phone_number,\n\tparse_phone_number_and_country_phone_code,\n\tfind_country_code,\n\tstrip_national_prefix\n}\nfrom './parse'\n\nimport\n{\n\tFIRST_GROUP_PATTERN,\n\tformat_national_number_using_format,\n\tlocal_to_international_style\n}\nfrom './format'\n\nimport\n{\n\tmatches_entirely\n}\nfrom './common'\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nconst DUMMY_DIGIT = '9'\nconst DUMMY_DIGIT_MATCHER = new RegExp(DUMMY_DIGIT, 'g')\n// I don't know why is it exactly `15`\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\nconst DIGIT_PLACEHOLDER_MATCHER_GLOBAL = new RegExp(DIGIT_PLACEHOLDER, 'g')\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nconst CHARACTER_CLASS_PATTERN = /\\[([^\\[\\]])*\\]/g\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nconst STANDALONE_DIGIT_PATTERN = /\\d(?=[^,}][^,}])/g\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\n(\n\t'^' +\n\t'[' + VALID_PUNCTUATION + ']*' +\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\n\t'$'\n)\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nconst MIN_LEADING_DIGITS_LENGTH = 3\n\nconst VALID_INCOMPLETE_PHONE_NUMBER =\n\t'[' + PLUS_CHARS + ']{0,1}' +\n\t'[' +\n\t\tVALID_PUNCTUATION +\n\t\tVALID_DIGITS +\n\t']*'\n\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\n\nexport default class as_you_type\n{\n\tconstructor(country_code, metadata)\n\t{\n\t\t// Sanity check\n\t\tif (!metadata)\n\t\t{\n\t\t\tthrow new Error('Metadata not passed')\n\t\t}\n\n\t\tif (country_code && metadata.countries[country_code])\n\t\t{\n\t\t\tthis.default_country = country_code\n\t\t}\n\n\t\tthis.metadata = metadata\n\n\t\tthis.reset()\n\t}\n\n\tinput(text)\n\t{\n\t\t// Parse input\n\n\t\tlet extracted_number = extract_formatted_phone_number(text)\n\n\t\t// Special case for a lone '+' sign\n\t\t// since it's not considered a possible phone number.\n\t\tif (!extracted_number)\n\t\t{\n\t\t\tif (text && text.indexOf('+') >= 0)\n\t\t\t{\n\t\t\t\textracted_number = '+'\n\t\t\t}\n\t\t}\n\n\t\t// Validate possible first part of a phone number\n\t\tif (!matches_entirely(extracted_number, VALID_INCOMPLETE_PHONE_NUMBER_PATTERN))\n\t\t{\n\t\t\treturn this.current_output\n\t\t}\n\n\t\treturn this.process_input(parse_phone_number(extracted_number))\n\t}\n\n\tprocess_input(input)\n\t{\n\t\t// If an out of position '+' sign detected\n\t\t// (or a second '+' sign),\n\t\t// then just drop it from the input.\n\t\tif (input[0] === '+')\n\t\t{\n\t\t\tif (!this.parsed_input)\n\t\t\t{\n\t\t\t\tthis.parsed_input += '+'\n\n\t\t\t\t// If a default country was set\n\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t// phone number is being entered\n\t\t\t\tthis.reset_countriness()\n\t\t\t}\n\n\t\t\tinput = input.slice(1)\n\t\t}\n\n\t\t// Raw phone number\n\t\tthis.parsed_input += input\n\n\t\t// // Reset phone number validation state\n\t\t// this.valid = false\n\n\t\t// Add digits to the national number\n\t\tthis.national_number += input\n\n\t\t// Try to format the parsed input\n\n\t\tif (this.is_international())\n\t\t{\n\t\t\tif (!this.country_phone_code)\n\t\t\t{\n\t\t\t\t// If one looks at country phone codes\n\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t// then just return the raw phone number,\n\t\t\t\t// because it has no way of knowing\n\t\t\t\t// how to format the phone number so far.\n\t\t\t\tif (!this.extract_country_phone_code())\n\t\t\t\t{\n\t\t\t\t\t// Return raw phone number\n\t\t\t\t\treturn this.parsed_input\n\t\t\t\t}\n\n\t\t\t\t// Initialize country-specific data\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_phone_code()\n\t\t\t\tthis.reset_format()\n\t\t\t\tthis.determine_the_country()\n\t\t\t}\n\t\t\t// `this.country` could be `undefined`,\n\t\t\t// for instance, when there is ambiguity\n\t\t\t// in a form of several different countries\n\t\t\t// each corresponding to the same country phone code\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t// and there's not enough digits entered\n\t\t\t// to reliably determine the country\n\t\t\t// the phone number belongs to.\n\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t// each time something is input,\n\t\t\t// try to determine the country\n\t\t\t// (if it's not determined yet).\n\t\t\telse if (!this.country)\n\t\t\t{\n\t\t\t\tthis.determine_the_country()\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\tconst previous_national_prefix = this.national_prefix\n\t\t\tthis.national_number = this.national_prefix + this.national_number\n\n\t\t\t// Possibly extract a national prefix\n\t\t\tthis.extract_national_prefix()\n\n\t\t\tif (this.national_prefix !== previous_national_prefix)\n\t\t\t{\n\t\t\t\t// National number has changed\n\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t// therefore national number has changed\n\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t// (and leading digits matching state)\n\t\t\t\tthis.matching_formats = this.available_formats\n\t\t\t\tthis.reset_format()\n\t\t\t}\n\t\t}\n\n\t\tif (!this.should_format())\n\t\t{\n\t\t\treturn this.format_as_non_formatted_number()\n\t\t}\n\n\t\t// Check the available phone number formats\n\t\t// based on the currently available leading digits.\n\t\tthis.match_formats_by_leading_digits()\n\n\t\t// Format the phone number (given the next digits)\n\t\tconst formatted_national_phone_number = this.format_national_phone_number(input)\n\n\t\t// If the phone number could be formatted,\n\t\t// then return it, possibly prepending with country phone code\n\t\t// (for international phone numbers only)\n\t\tif (formatted_national_phone_number)\n\t\t{\n\t\t\treturn this.full_phone_number(formatted_national_phone_number)\n\t\t}\n\n\t\t// If the phone number couldn't be formatted,\n\t\t// then just fall back to the raw phone number.\n\t\treturn this.parsed_input\n\t}\n\n\tformat_as_non_formatted_number()\n\t{\n\t\tif (this.is_international() && this.country_phone_code)\n\t\t{\n\t\t\tif (this.national_number)\n\t\t\t{\n\t\t\t\t// For convenience, the public `.template` property\n\t\t\t\t// contains the whole international number\n\t\t\t\t// if the phone number being input is international:\n\t\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t\t// a spacebar and then the template for the national number digits.\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.country_phone_code.length) + ' ' + repeat(DIGIT_PLACEHOLDER, this.national_number.length)\n\n\t\t\t\treturn `+${this.country_phone_code} ${this.national_number}`\n\t\t\t}\n\n\t\t\treturn `+${this.country_phone_code}`\n\t\t}\n\n\t\treturn this.parsed_input\n\t}\n\n\tformat_national_phone_number(next_digits)\n\t{\n\t\t// Format the next phone number digits\n\t\t// using the previously chosen phone number format.\n\t\t//\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t// was placed before this call then the `template`\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t//\n\t\tlet national_number_formatted_with_previous_format\n\t\tif (this.chosen_format)\n\t\t{\n\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits)\n\t\t}\n\n\t\t// See if the input digits can be formatted properly already. If not,\n\t\t// use the results from format_next_national_number_digits(), which does formatting\n\t\t// based on the formatting pattern chosen.\n\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\n\n\t\t// Just because a phone number doesn't have a suitable format\n\t\t// that doesn't mean that the phone is invalid\n\t\t// because phone number formats only format phone numbers,\n\t\t// they don't validate them and some (rare) phone numbers\n\t\t// are meant to stay non-formatted.\n\t\tif (formatted_number)\n\t\t{\n\t\t\t// if (this.country)\n\t\t\t// {\n\t\t\t// \tthis.valid = true\n\t\t\t// }\n\n\t\t\treturn formatted_number\n\t\t}\n\n\t\t// For some phone number formats national prefix\n\n\t\t// If the previously chosen phone number format\n\t\t// didn't match the next (current) digit being input\n\t\t// (leading digits pattern didn't match).\n\t\tif (this.choose_another_format())\n\t\t{\n\t\t\t// And a more appropriate phone number format\n\t\t\t// has been chosen for these `leading digits`,\n\t\t\t// then format the national phone number (so far)\n\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t// the supplied national number\n\t\t\t// using the selected phone number pattern.\n\n\t\t\treturn this.reformat_national_number()\n\t\t}\n\n\t\t// If could format the next (current) digit\n\t\t// using the previously chosen phone number format\n\t\t// then return the formatted number so far.\n\n\t\t// If no new phone number format could be chosen,\n\t\t// and couldn't format the supplied national number\n\t\t// using the selected phone number pattern,\n\t\t// then it will return `undefined`.\n\n\t\treturn national_number_formatted_with_previous_format\n\t}\n\n\treset()\n\t{\n\t\t// Input stripped of non-phone-number characters.\n\t\t// Can only contain a possible leading '+' sign and digits.\n\t\tthis.parsed_input = ''\n\n\t\tthis.current_output = ''\n\n\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t// digits without formatting.\n\t\tthis.national_prefix = ''\n\n\t\tthis.national_number = ''\n\n\t\tthis.reset_countriness()\n\n\t\tthis.reset_format()\n\n\t\t// this.valid = false\n\n\t\treturn this\n\t}\n\n\treset_country()\n\t{\n\t\tif (this.default_country && !this.is_international())\n\t\t{\n\t\t\tthis.country = this.default_country\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.country = undefined\n\t\t}\n\t}\n\n\treset_countriness()\n\t{\n\t\tthis.reset_country()\n\n\t\tif (this.default_country && !this.is_international())\n\t\t{\n\t\t\tthis.country_metadata = this.metadata.countries[this.default_country]\n\t\t\tthis.country_phone_code = this.country_metadata.phone_code\n\n\t\t\tthis.initialize_phone_number_formats_for_this_country_phone_code()\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.country_metadata = undefined\n\t\t\tthis.country_phone_code = undefined\n\n\t\t\tthis.available_formats = []\n\t\t\tthis.matching_formats = this.available_formats\n\t\t}\n\t}\n\n\treset_format()\n\t{\n\t\tthis.chosen_format = undefined\n\t\tthis.template = undefined\n\t\tthis.partially_populated_template = undefined\n\t\tthis.last_match_position = -1\n\t}\n\n\t// Format each digit of national phone number (so far)\n\t// using the newly selected phone number pattern.\n\treformat_national_number()\n\t{\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the selected phone number pattern.\n\t\treturn this.format_next_national_number_digits(this.national_number)\n\t}\n\n\tinitialize_phone_number_formats_for_this_country_phone_code()\n\t{\n\t\t// Get all \"eligible\" phone number formats for this country\n\t\tthis.available_formats = get_formats(this.country_metadata).filter((format) =>\n\t\t{\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(get_format_international_format(format))\n\t\t})\n\n\t\tthis.matching_formats = this.available_formats\n\t}\n\n\tmatch_formats_by_leading_digits()\n\t{\n\t\tconst leading_digits = this.national_number\n\n\t\t// \"leading digits\" patterns start with a maximum of 3 digits,\n\t\t// and then with each additional digit\n\t\t// a more precise \"leading digits\" pattern is specified.\n\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\n\n\t\tif (index_of_leading_digits_pattern < 0)\n\t\t{\n\t\t\tindex_of_leading_digits_pattern = 0\n\t\t}\n\n\t\tthis.matching_formats = this.matching_formats.filter((format) =>\n\t\t{\n\t\t\tconst leading_digits_pattern_count = get_format_leading_digits_patterns(format).length\n\n\t\t\t// Keep everything that isn't restricted by leading digits.\n\t\t\tif (leading_digits_pattern_count === 0)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_pattern_count - 1)\n\t\t\tconst leading_digits_pattern = get_format_leading_digits_patterns(format)[leading_digits_pattern_index]\n\n\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\n\t\t})\n\n\t\t// If there was a phone number format chosen\n\t\t// and it no longer holds given the new leading digits then reset it\n\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1)\n\t\t{\n\t\t\tthis.reset_format()\n\t\t}\n\t}\n\n\tshould_format()\n\t{\n\t\t// Start matching any formats at all when the national number\n\t\t// entered so far is at least 3 digits long,\n\t\t// otherwise format matching would give false negatives\n\t\t// like when the digits entered so far are `2`\n\t\t// and the leading digits pattern is `21` –\n\t\t// it's quite obvious in this case that the format could be the one\n\t\t// but due to the absence of further digits it would give false negative.\n\t\t//\n\t\t// Google could have provided leading digits patterns starting\n\t\t// with a single digit but they chose not to (for whatever reasons).\n\t\t//\n\t\treturn this.national_number >= MIN_LEADING_DIGITS_LENGTH\n\t}\n\n\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t// should use this instead of any other formatting template whose\n\t// leadingDigitsPattern also matches the input.\n\tattempt_to_format_complete_phone_number()\n\t{\n\t\tfor (const format of this.matching_formats)\n\t\t{\n\t\t\tconst matcher = new RegExp('^(?:' + get_format_pattern(format) + ')$')\n\n\t\t\tif (!matcher.test(this.national_number))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!this.validate_format(format))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// To leave the formatter in a consistent state\n\t\t\tthis.reset_format()\n\t\t\tthis.chosen_format = format\n\n\t\t\tconst formatted_number = format_national_number_using_format\n\t\t\t(\n\t\t\t\tthis.national_number,\n\t\t\t\tformat,\n\t\t\t\tthis.is_international(),\n\t\t\t\tthis.national_prefix.length > 0,\n\t\t\t\tthis.country_metadata\n\t\t\t)\n\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t//\n\t\t\t// `else` case doesn't ever happen\n\t\t\t// with the current metadata,\n\t\t\t// but just in case.\n\t\t\t//\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.create_formatting_template(format))\n\t\t\t{\n\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\tthis.reformat_national_number()\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\tconst full_number = this.full_phone_number(formatted_number)\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\n\t\t\t\tthis.partially_populated_template = full_number\n\t\t\t}\n\n\t\t\treturn formatted_number\n\t\t}\n\t}\n\n\t// Prepends `+CountryCode` in case of an international phone number\n\tfull_phone_number(formatted_national_number)\n\t{\n\t\tif (this.is_international())\n\t\t{\n\t\t\treturn `+${this.country_phone_code} ${formatted_national_number}`\n\t\t}\n\n\t\treturn formatted_national_number\n\t}\n\n\t// Extracts the country calling code from the beginning\n\t// of the entered `national_number` (so far),\n\t// and places the remaining input into the `national_number`.\n\textract_country_phone_code()\n\t{\n\t\tif (!this.national_number)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(this.parsed_input, this.metadata)\n\n\t\tif (!country_phone_code)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tthis.country_phone_code = country_phone_code\n\t\tthis.national_number = number\n\n\t\treturn this.country_metadata = get_metadata_by_country_phone_code(country_phone_code, this.metadata)\n\t}\n\n\textract_national_prefix()\n\t{\n\t\tthis.national_prefix = ''\n\n\t\tif (!this.country_metadata)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tconst national_number = strip_national_prefix(this.national_number, this.country_metadata)\n\n\t\tif (national_number !== this.national_number)\n\t\t{\n\t\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - national_number.length)\n\t\t\tthis.national_number = national_number\n\t\t}\n\n\t\treturn this.national_prefix\n\t}\n\n\tchoose_another_format()\n\t{\n\t\t// When there are multiple available formats, the formatter uses the first\n\t\t// format where a formatting template could be created.\n\t\tfor (const format of this.matching_formats)\n\t\t{\n\t\t\t// If this format is currently being used\n\t\t\t// and is still possible, then stick to it.\n\t\t\tif (this.chosen_format === format)\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t// then extract the template from this format\n\t\t\t// and use it to format the phone number being input.\n\n\t\t\tif (!this.validate_format(format))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!this.create_formatting_template(format))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.chosen_format = format\n\n\t\t\t// With a new formatting template, the matched position\n\t\t\t// using the old template needs to be reset.\n\t\t\tthis.last_match_position = -1\n\n\t\t\treturn true\n\t\t}\n\n\t\t// No format matches the phone number,\n\t\t// therefore set `country` to `undefined`\n\t\t// (or to the default country).\n\t\tthis.reset_country()\n\n\t\t// No format matches the national phone number entered\n\t\tthis.reset_format()\n\t}\n\n\tvalidate_format(format)\n\t{\n\t\t// If national prefix is mandatory for this phone number format\n\t\t// and the user didn't input the national prefix,\n\t\t// then this phone number format isn't suitable.\n\t\tif (!this.is_international() && !this.national_prefix && get_format_national_prefix_is_mandatory_when_formatting(format, this.country_metadata))\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\treturn true\n\t}\n\n\tcreate_formatting_template(format)\n\t{\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t// (Though there's no such format in current metadata)\n\t\t/* istanbul ignore if */\n\t\tif (get_format_pattern(format).indexOf('|') >= 0)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, this.country_metadata)\n\n\t\t// A very smart trick by the guys at Google\n\t\tconst number_pattern = get_format_pattern(format)\n\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t.replace(CHARACTER_CLASS_PATTERN, '\\\\d')\n\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t.replace(STANDALONE_DIGIT_PATTERN, '\\\\d')\n\n\t\t// This match will always succeed,\n\t\t// because the \"longest dummy phone number\"\n\t\t// has enough length to accomodate any possible\n\t\t// national phone number format pattern.\n\t\tconst dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\n\n\t\t// If the national number entered is too long\n\t\t// for any phone number format, then abort.\n\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// Prepare the phone number format\n\t\tconst number_format = this.get_format_format(format, national_prefix_formatting_rule)\n\n\t\t// Get a formatting template which can be used to efficiently format\n\t\t// a partial number where digits are added one by one.\n\n\t\t// Create formatting template for this phone number format\n\t\tlet template = dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern, 'g'), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(DUMMY_DIGIT_MATCHER, DIGIT_PLACEHOLDER)\n\n\t\t// This one is for national number only\n\t\tthis.partially_populated_template = template\n\n\t\t// For convenience, the public `.template` property\n\t\t// contains the whole international number\n\t\t// if the phone number being input is international:\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t// a spacebar and then the template for the formatted national number.\n\t\tif (this.is_international())\n\t\t{\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.country_phone_code.length) + ' ' + template\n\t\t}\n\t\t// For local numbers, replace national prefix\n\t\t// with a digit placeholder.\n\t\telse\n\t\t{\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\n\t\t}\n\n\t\t// This one is for the full phone number\n\t\treturn this.template\n\t}\n\n\tformat_next_national_number_digits(digits)\n\t{\n\t\tfor (let digit of digits)\n\t\t{\n\t\t\t// If there is room for more digits in current `template`,\n\t\t\t// then set the next digit in the `template`,\n\t\t\t// and return the formatted digits so far.\n\n\t\t\t// If more digits are entered than the current format could handle\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\n\t\t\t{\n\t\t\t\t// Reset the current format,\n\t\t\t\t// so that the new format will be chosen\n\t\t\t\t// in a subsequent `this.choose_another_format()` call\n\t\t\t\t// later in code.\n\t\t\t\tthis.chosen_format = undefined\n\t\t\t\tthis.template = undefined\n\t\t\t\tthis.partially_populated_template = undefined\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\n\t\t}\n\n\t\t// Return the formatted phone number so far\n\t\treturn close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t}\n\n\tis_international()\n\t{\n\t\treturn this.parsed_input && this.parsed_input[0] === '+'\n\t}\n\n\tget_format_format(format, national_prefix_formatting_rule)\n\t{\n\t\tlet number_format = this.is_international() ? get_format_international_format(format) : get_format_format(format)\n\n\t\t// If national prefix formatting rule is set\n\t\t// for this phone number format\n\t\tif (national_prefix_formatting_rule)\n\t\t{\n\t\t\t// If the user did input the national prefix\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t// then maybe make it part of the phone number template\n\t\t\tif (this.national_prefix || !get_format_uses_national_prefix(national_prefix_formatting_rule))\n\t\t\t{\n\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\tnumber_format = number_format.replace(FIRST_GROUP_PATTERN, national_prefix_formatting_rule)\n\t\t\t}\n\t\t}\n\n\t\tif (this.is_international())\n\t\t{\n\t\t\treturn local_to_international_style(number_format)\n\t\t}\n\n\t\treturn number_format\n\t}\n\n\t// Determines the country of the phone number\n\t// entered so far based on the country phone code\n\t// and the national phone number.\n\tdetermine_the_country()\n\t{\n\t\tthis.country = find_country_code(this.country_phone_code, this.national_number, this.metadata)\n\t}\n}\n\nexport function close_dangling_braces(template, cut_before)\n{\n\tconst retained_template = template.slice(0, cut_before)\n\n\tconst opening_braces = count_occurences('(', retained_template)\n\tconst closing_braces = count_occurences(')', retained_template)\n\n\tlet dangling_braces = opening_braces - closing_braces\n\n\twhile (dangling_braces > 0 && cut_before < template.length)\n\t{\n\t\tif (template[cut_before] === ')')\n\t\t{\n\t\t\tdangling_braces--\n\t\t}\n\t\tcut_before++\n\t}\n\n\treturn template.slice(0, cut_before)\n}\n\n// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string)\n{\n\tlet count = 0\n\n\tfor (let character of string)\n\t{\n\t\tif (character === symbol)\n\t\t{\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times)\n{\n\tif (times < 1)\n\t{\n\t\treturn ''\n\t}\n\n\tlet result = ''\n\n\twhile (times > 1)\n\t{\n\t\tif (times & 1)\n\t\t{\n\t\t\tresult += string\n\t\t}\n\n\t\ttimes >>= 1\n\t\tstring += string\n\t}\n\n\treturn result + string\n}\n"]}