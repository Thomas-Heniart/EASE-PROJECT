{"version":3,"sources":["../source/helpers.js"],"names":["is_object","extend","merge","clone","convert_from_camel_case","replace_all","starts_with","ends_with","is_empty","not_empty","repeat","is_blank","zip","exists","what","object_constructor","constructor","object","objects","to","from","length","last","pop","intermediary_result","apply","key","parameters","Array","prototype","slice","call","arguments","unshift","test","lo_dashed_key","replace","match","group_1","toLowerCase","escape_regexp","string","specials","RegExp","where","with_what","regexp","substring","indexOf","index","lastIndexOf","array","times","result","text","a","b","map","_"],"mappings":"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","file":"helpers.js","sourcesContent":["// // if the variable is defined\nexport const exists = what => typeof what !== 'undefined'\n\n// used for JSON object type checking\nconst object_constructor = {}.constructor\n\n// detects a JSON object\nexport function is_object(object)\n{\n\treturn exists(object) && (object !== null) && object.constructor === object_constructor\n}\n\n// extends the first object with \n/* istanbul ignore next: some weird transpiled code, not testable */\nexport function extend(...objects)\n{\n\tconst to   = objects[0]\n\tconst from = objects[1]\n\n\tif (objects.length > 2)\n\t{\n\t\tconst last = objects.pop()\n\t\tconst intermediary_result = extend.apply(this, objects)\n\t\treturn extend(intermediary_result, last)\n\t}\n\n\tfor (let key of Object.keys(from))\n\t{\n\t\tif (is_object(from[key]))\n\t\t{\n\t\t\tif (!is_object(to[key]))\n\t\t\t{\n\t\t\t\tto[key] = {}\n\t\t\t}\n\n\t\t\textend(to[key], from[key])\n\t\t}\n\t\telse\n\t\t{\n\t\t\tto[key] = from[key]\n\t\t}\n\t}\n\n\treturn to\n}\n\nexport function merge()\n{\n\tconst parameters = Array.prototype.slice.call(arguments, 0)\n\tparameters.unshift({})\n\treturn extend.apply(this, parameters)\n}\n\nexport function clone(object)\n{\n\treturn merge({}, object)\n}\n\n// creates camelCased aliases for all the keys of an object\nexport function convert_from_camel_case(object)\n{\n\tfor (let key of Object.keys(object))\n\t{\n\t\tif (/[A-Z]/.test(key))\n\t\t// if (key.indexOf('_') >= 0)\n\t\t{\n\t\t\t// const camel_cased_key = key.replace(/_(.)/g, function(match, group_1)\n\t\t\t// {\n\t\t\t// \treturn group_1.toUpperCase()\n\t\t\t// })\n\n\t\t\t// if (!exists(object[camel_cased_key]))\n\t\t\t// {\n\t\t\t// \tobject[camel_cased_key] = object[key]\n\t\t\t// \tdelete object[key]\n\t\t\t// }\n\n\t\t\tconst lo_dashed_key = key.replace(/([A-Z])/g, function(match, group_1)\n\t\t\t{\n\t\t\t\treturn '_' + group_1.toLowerCase()\n\t\t\t})\n\n\t\t\tif (!exists(object[lo_dashed_key]))\n\t\t\t{\n\t\t\t\tobject[lo_dashed_key] = object[key]\n\t\t\t\tdelete object[key]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn object\n}\n\nfunction escape_regexp(string)\n{\n\tconst specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", 'g')\n\treturn string.replace(specials, \"\\\\$&\")\n}\n\nexport function replace_all(where, what, with_what)\n{\n\tconst regexp = new RegExp(escape_regexp(what), 'g')\n\treturn where.replace(regexp, with_what)\n}\n\nexport function starts_with(string, substring)\n{\n\treturn string.indexOf(substring) === 0\n}\n\nexport function ends_with(string, substring)\n{\n\tconst index = string.lastIndexOf(substring)\n\treturn index >= 0 && index === string.length - substring.length\n}\n\nexport function is_empty(array)\n{\n\treturn array.length === 0\n}\n\nexport function not_empty(array)\n{\n\treturn array.length > 0\n}\n\n// repeat string N times\nexport function repeat(what, times)\n{\n\tlet result = ''\n\twhile (times > 0)\n\t{\n\t\tresult += what\n\t\ttimes--\n\t}\n\treturn result\n}\n\n// if the text is blank\nexport function is_blank(text)\n{\n\treturn !exists(text) || !text.replace(/\\s/g, '')\n}\n\n// zips two arrays\nexport function zip(a, b)\n{\n\treturn a.map(function(_, index) \n\t{\n\t\treturn [a[index], b[index]]\n\t})\n}"]}