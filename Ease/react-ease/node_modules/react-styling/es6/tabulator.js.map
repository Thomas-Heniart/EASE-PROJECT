{"version":3,"sources":["../source/tabulator.js"],"names":["starts_with","is_blank","repeat","Tabulator","tab","line","how_much","substring","symbol","length","matches","match","regexp","lines","map","index","filter","forEach","tabs","calculate_indentation","pure_line","reduce_indentation","reason","Error","reveal_whitespace","original_line","minimum_indentation","reduce","minimum","Math","min","Infinity","text","whitespace_count","replace","whitespace","regexp_anywhere","rest","determine_tabulation","substract","pair","is_tabulated","RegExp","spaced_tab","tab_width","calculate_leading_spaces","counter","abs","slice"],"mappings":"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","file":"tabulator.js","sourcesContent":["import { starts_with, is_blank, repeat } from './helpers'\r\n\r\n// tabulation utilities\r\nexport default class Tabulator\r\n{\r\n\tconstructor(tab)\r\n\t{\r\n\t\tthis.tab = tab\r\n\t}\r\n\r\n\t// remove some tabs in the beginning\r\n\treduce_indentation(line, how_much)\r\n\t{\r\n\t\treturn line.substring(this.tab.symbol.length * how_much)\r\n\t}\r\n\r\n\t// how many \"tabs\" are there before content of this line\r\n\tcalculate_indentation(line)\r\n\t{\r\n\t\tconst matches = line.match(this.tab.regexp)\r\n\r\n\t\tif (!matches || matches[0] === '')\r\n\t\t{\r\n\t\t\treturn 0\r\n\t\t}\r\n\r\n\t\treturn matches[0].length / this.tab.symbol.length\r\n\t}\r\n\r\n\textract_tabulation(lines)\r\n\t{\r\n\t\tlines = lines\r\n\t\t\t// preserve line indexes\r\n\t\t\t.map((line, index) =>\r\n\t\t\t{\r\n\t\t\t\tindex++\r\n\t\t\t\treturn { line, index }\r\n\t\t\t})\r\n\t\t\t// filter out blank lines\r\n\t\t\t.filter(line => !is_blank(line.line))\r\n\r\n\t\t// calculate each line's indentation\r\n\t\tlines.forEach(line => \r\n\t\t{\r\n\t\t\tconst tabs = this.calculate_indentation(line.line)\r\n\t\t\tconst pure_line = this.reduce_indentation(line.line, tabs)\r\n\r\n\t\t\t// check for messed up space indentation\r\n\t\t\tif (starts_with(pure_line, ' '))\r\n\t\t\t{\r\n\t\t\t\tlet reason\r\n\t\t\t\tif (this.tab.symbol === '\\t')\r\n\t\t\t\t{\r\n\t\t\t\t\treason = 'mixed tabs and spaces'\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treason = 'extra leading spaces'\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow new Error(`Invalid indentation (${reason}) at line ${line.index}: \"${this.reveal_whitespace(line.line)}\"`)\r\n\t\t\t}\r\n\r\n\t\t\t// check for tabs in spaced intentation\r\n\t\t\tif (starts_with(pure_line, '\\t'))\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(`Invalid indentation (mixed tabs and spaces) at line ${line.index}: \"${this.reveal_whitespace(line.line)}\"`)\r\n\t\t\t}\r\n\r\n\t\t\tline.tabs          = tabs\r\n\t\t\tline.original_line = line.line\r\n\t\t\tline.line          = pure_line\r\n\t\t})\r\n\r\n\t\t// get the minimum indentation level\r\n\t\tconst minimum_indentation = lines\r\n\t\t\t.reduce((minimum, line) => Math.min(minimum, line.tabs), Infinity)\r\n\r\n\t\t// if there is initial tabulation missing - add it\r\n\t\tif (minimum_indentation === 0)\r\n\t\t{\r\n\t\t\tlines.forEach(function(line)\r\n\t\t\t{\r\n\t\t\t\tline.tabs++\r\n\t\t\t})\r\n\t\t}\r\n\t\t// if there is excessive tabulation - trim it\r\n\t\telse if (minimum_indentation > 1)\r\n\t\t{\r\n\t\t\tlines.forEach(function(line)\r\n\t\t\t{\r\n\t\t\t\tline.tabs -= minimum_indentation - 1\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// check for messed up tabulation\r\n\t\tif (lines.length > 0 && lines[0].tabs !== 1)\r\n\t\t{\r\n\t\t\tthrow new Error(`Invalid indentation at line ${lines[0].index}: \"${lines[0].original_line}\"`)\r\n\t\t}\r\n\r\n\t\treturn lines\r\n\t}\r\n\r\n\treveal_whitespace(text)\r\n\t{\r\n\t\tconst whitespace_count = text.length - text.replace(/^\\s*/, '').length\r\n\r\n\t\tconst whitespace = text.substring(0, whitespace_count + 1)\r\n\t\t\t.replace(this.tab.regexp_anywhere, '[indent]')\r\n\t\t\t.replace(/ /g, '[space]')\r\n\t\t\t.replace(/\\t/g, '[tab]')\r\n\r\n\t\tconst rest = text.substring(whitespace_count + 1)\r\n\r\n\t\treturn whitespace + rest\r\n\t}\r\n}\r\n\r\n// decide whether it's tabs or spaces\r\nTabulator.determine_tabulation = function(lines)\r\n{\r\n\tconst substract = pair => pair[0] - pair[1]\r\n\r\n\tfunction is_tabulated(line)\r\n\t{\r\n\t\t// if we're using tabs for tabulation\r\n\t\tif (starts_with(line, '\\t'))\r\n\t\t{\r\n\t\t\tconst tab = \r\n\t\t\t{\r\n\t\t\t\tsymbol: '\\t',\r\n\t\t\t\tregexp: new RegExp('^(\\t)+', 'g'),\r\n\t\t\t\tregexp_anywhere: new RegExp('(\\t)+', 'g')\r\n\t\t\t}\r\n\r\n\t\t\treturn tab\r\n\t\t}\r\n\t}\r\n\r\n\tfunction spaced_tab(tab_width)\r\n\t{\r\n\t\tconst symbol = repeat(' ', tab_width)\r\n\r\n\t\tconst spaced_tab = \r\n\t\t{\r\n\t\t\tsymbol: symbol,\r\n\t\t\tregexp: new RegExp(`^(${symbol})+`, 'g'),\r\n\t\t\tregexp_anywhere: new RegExp(`(${symbol})+`, 'g')\r\n\t\t}\r\n\r\n\t\treturn spaced_tab\r\n\t}\r\n\r\n\tfunction calculate_leading_spaces(line)\r\n\t{\r\n\t\tlet counter = 0\r\n\t\tline.replace(/^( )+/g, function(match) { counter = match.length })\r\n\t\treturn counter\r\n\t}\r\n\r\n\t// take all meaningful lines\r\n\tlines = lines.filter(line => !is_blank(line))\r\n\r\n\t// has to be at least two of them\r\n\tif (lines.length === 0)\r\n\t{\r\n\t\treturn tab\r\n\t\t// throw new Error(`Couldn't decide on tabulation type. Not enough lines.`)\r\n\t}\r\n\r\n\tif (lines.length === 1)\r\n\t{\r\n\t\tconst tab = is_tabulated(lines[0])\r\n\t\tif (tab)\r\n\t\t{\r\n\t\t\treturn tab\r\n\t\t}\r\n\r\n\t\treturn spaced_tab(calculate_leading_spaces(lines[0]))\r\n\t}\r\n\r\n\t// if we're using tabs for tabulation\r\n\tconst tab = is_tabulated(lines[1])\r\n\tif (tab)\r\n\t{\r\n\t\treturn tab\r\n\t}\r\n\r\n\t// take the first two lines,\r\n\t// calculate their indentation,\r\n\t// substract it and you've got the tab width\r\n\tconst tab_width = Math.abs(substract\r\n\t(\r\n\t\tlines\r\n\t\t\t.slice(0, 2)\r\n\t\t\t.map(calculate_leading_spaces)\r\n\t)) \r\n\t|| 1\r\n\r\n\t// if (tab_width === 0)\r\n\t// {\r\n\t// \tthrow new Error(`Couldn't decide on tabulation type. Same indentation.`)\r\n\t// }\r\n\r\n\treturn spaced_tab(tab_width)\r\n}"]}