{"version":3,"sources":["../source/index.js"],"names":["exists","starts_with","ends_with","is_blank","zip","extend","not_empty","Tabulator","style_builder","strings","values","styler","options","style","i","length","parse_style_json_object","text","replace","lines","split","tabulator","determine_tabulation","style_json","parse_style_class","extract_tabulation","expand","build","expand_modifier_style_classes","parse_node_json","styles","children_lines","node_names","style_object","map","key","substring","indexOf","trim","value","character","toUpperCase","String","parseInt","parseFloat","reduce","parse_children","split_into_style_lines_and_children_lines","style_lines","filter","line","tabs","colon_index","forEach","parse_node_name","name","is_a_modifier","parent_node_names","filter_lines_for_parsing","split_lines_by_child_nodes","declaration_line","shift","Error","index","original_line","declaration","names","validate_child_style_class_types","node_declaration","json","_is_a_modifier","array","child_array","concat","nodes","node","node_entry_lines","node_ending_lines","line_index","push","from_to","slice","get_node_style","pseudo_classes_and_media_queries_and_keyframes","get_node_pseudo_classes_and_media_queries_and_keyframes","modifiers","expand_modified_subtree","property","style_property","is_pseudo_class","is_media_query","is_keyframes","modified_node","is_keyframe_selector","parent","non_pseudoclass","x","non_keyframe_selector"],"mappings":"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","file":"index.js","sourcesContent":["import { exists, starts_with, ends_with, is_blank, zip, extend, not_empty } from './helpers'\nimport Tabulator from './tabulator'\nimport style_builder from 'style-builder'\n\n// using ES6 template strings\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\nexport default function(strings, ...values)\n{\n\treturn styler(strings, values)\n}\n\n// (the main function)\n// Parses CSS into a JSON object\nexport function styler(strings, values, options = {})\n{\n\tlet style = ''\n\n\t// restore the whole string from \"strings\" and \"values\" parts\n\tlet i = 0\n\twhile (i < strings.length)\n\t{\n\t\tstyle += strings[i]\n\t\tif (exists(values[i]))\n\t\t{\n\t\t\tstyle += values[i]\n\t\t}\n\t\ti++\n\t}\n\n\treturn parse_style_json_object(style, options)\n}\n\n// converts text to JSON object\nfunction parse_style_json_object(text, options)\n{\n\t// remove multiline comments\n\ttext = text.replace(/\\/\\*([\\s\\S]*?)\\*\\//g, '')\n\n\t// ignore curly braces for now.\n\t// maybe support curly braces along with tabulation in future\n\ttext = text.replace(/[\\{\\}]/g, '')\n\n\tconst lines = text.split('\\n')\n\n\t// helper class for dealing with tabulation\n\tconst tabulator = new Tabulator(Tabulator.determine_tabulation(lines))\n\n\t// parse text into JSON object\n\tlet style_json = parse_style_class(tabulator.extract_tabulation(lines), [])\n\n\t// expand CSS shorthand properties\n\t// (e.g. `margin: 1px` -> `margin-left: 1px; ...`)\n\tif (options.expand)\n\t{\n\t\tstyle_json = style_builder.build(style_json)\n\t}\n\n\t// expand \"modifier\" style classes\n\t// (which can override some of the expanded shorthand CSS properties)\n\treturn expand_modifier_style_classes(style_json)\n}\n\n// parse child nodes' lines (and this node's styles) into this node's style JSON object\nfunction parse_node_json(styles, children_lines, node_names)\n{\n\t// transform this node's style lines from text to JSON properties and their values\n\tconst style_object = styles.map(function(style)\n\t{\n\t\tlet key   = style.substring(0, style.indexOf(':')).trim()\n\t\tlet value = style.substring(style.indexOf(':') + ':'.length).trim()\n\n\t\t// transform dashed key to camelCase key (it's required by React)\n\t\tkey = key.replace(/([-]{1}[a-z]{1})/g, character => character.substring(1).toUpperCase())\n\n\t\t// support old CSS syntax\n\t\tvalue = value.replace(/;$/, '').trim()\n\n\t\t// check if the value can be parsed into an integer\n\t\tif (String(parseInt(value)) === value)\n\t\t{\n\t\t\tvalue = parseInt(value)\n\t\t}\n\n\t\t// check if the value can be parsed into a float\n\t\tif (String(parseFloat(value)) === value)\n\t\t{\n\t\t\tvalue = parseFloat(value)\n\t\t}\n\n\t\treturn { key, value }\n\t})\n\t// combine the styles into a JSON object\n\t.reduce(function(styles, style)\n\t{\n\t\tstyles[style.key] = style.value\n\t\treturn styles\n\t}, \n\t{})\n\n\t// parse child nodes and add them to this node's JSON object\n\treturn extend(style_object, parse_children(children_lines, node_names))\n}\n\n// separates style lines from children lines\nfunction split_into_style_lines_and_children_lines(lines)\n{\n\t// get this node style lines\n\tconst style_lines = lines.filter(function(line)\n\t{\n\t\t// styles always have indentation of 1\n\t\tif (line.tabs !== 1)\n\t\t{\n\t\t\treturn false\n\t\t}\n\n\t\t// detect generic css style line (skip modifier classes and media queries)\n\t\tconst colon_index = line.line.indexOf(':')\n\n\t\t// is not a modifier class\n\t\treturn !starts_with(line.line, '&') \n\t\t\t// is not a media query style class name declaration\n\t\t\t&& !starts_with(line.line, '@media') \n\t\t\t// is not a keyframes style class name declaration\n\t\t\t&& !starts_with(line.line, '@keyframes') \n\t\t\t// has a colon\n\t\t\t&& colon_index >= 0 \n\t\t\t// is not a state class (e.g. :hover) name declaration\n\t\t\t&& colon_index !== 0\n\t\t\t// is not a yaml-style class name declaration\n\t\t\t&& colon_index < line.line.length - 1\n\t})\n\n\t// get children nodes' lines\n\tconst children_lines = lines.filter(line => style_lines.indexOf(line) < 0)\n\n\t// reduce tabulation for this child node's (or these child nodes') child nodes' lines\n\tchildren_lines.forEach(line => line.tabs--)\n\n\treturn { style_lines, children_lines}\n}\n\n// parses a style class node name\nfunction parse_node_name(name)\n{\n\t// is it a \"modifier\" style class\n\tlet is_a_modifier = false\n\n\t// detect modifier style classes\n\tif (starts_with(name, '&'))\n\t{\n\t\tname = name.substring('&'.length)\n\t\tis_a_modifier = true\n\t}\n\n\t// support old-school CSS syntax\n\tif (starts_with(name, '.'))\n\t{\n\t\tname = name.substring('.'.length)\n\t}\n\n\t// if there is a trailing colon in the style class name - trim it\n\t// (Python people with yaml-alike syntax)\n\tif (ends_with(name, ':'))\n\t{\n\t\tname = name.substring(0, name.length - ':'.length)\n\t\t// throw new Error(`Remove the trailing colon at line: ${original_line}`)\n\t}\n\n\treturn { name, is_a_modifier }\n}\n\n// parses child nodes' lines of text into the corresponding child node JSON objects\nfunction parse_children(lines, parent_node_names)\n{\n\t// preprocess the lines (filter out comments, blank lines, etc)\n\tlines = filter_lines_for_parsing(lines)\n\n\t// return empty object if there are no lines to parse\n\tif (lines.length === 0)\n\t{\n\t\treturn {}\n\t}\n\n\t// parse each child node's lines\n\treturn split_lines_by_child_nodes(lines).map(function(lines)\n\t{\n\t\t// the first line is this child node's name (or names)\n\t\tconst declaration_line = lines.shift()\n\n\t\t// check for excessive indentation of the first child style class\n\t\tif (declaration_line.tabs !== 0)\n\t\t{\n\t\t\tthrow new Error(`Excessive indentation (${declaration_line.tabs} more \"tabs\" than needed) at line ${declaration_line.index}: \"${declaration_line.original_line}\"`)\n\t\t}\n\n\t\t// style class name declaration\n\t\tconst declaration = declaration_line.line\n\n\t\t// child nodes' names\n\t\tconst names = declaration.split(',').map(name => name.trim())\n\n\t\t// style class nesting validation\n\t\tvalidate_child_style_class_types(parent_node_names, names)\n\n\t\t// parse own CSS styles and recursively parse all child nodes\n\t\tconst style_json = parse_style_class(lines, names)\n\n\t\t// generate style json for this child node (or child nodes)\n\t\treturn names.map(function(node_declaration)\n\t\t{\n\t\t\t// parse this child node name\n\t\t\tconst { name, is_a_modifier } = parse_node_name(node_declaration)\n\n\t\t\t// clone the style JSON object for this child node\n\t\t\tconst json = extend({}, style_json)\n\n\t\t\t// set the modifier flag if it's the case\n\t\t\tif (is_a_modifier)\n\t\t\t{\n\t\t\t\tjson._is_a_modifier = true\n\t\t\t}\n\n\t\t\t// this child node's style JSON object\n\t\t\treturn { name, json }\n\t\t})\n\t})\n\t// convert an array of arrays to a flat array\n\t.reduce(function(array, child_array)\n\t{\n\t\treturn array.concat(child_array);\n\t}, \n\t[])\n\t// combine all the child nodes into a single JSON object\n\t.reduce(function(nodes, node)\n\t{\n\t\t// if style already exists for this child node, extend it\n\t\tif (nodes[node.name])\n\t\t{\n\t\t\textend(nodes[node.name], node.json)\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnodes[node.name] = node.json\n\t\t}\n\t\t\n\t\treturn nodes\n\t}, \n\t{})\n}\n\n// filters out comments, blank lines, etc\nfunction filter_lines_for_parsing(lines)\n{\n\t// filter out blank lines\n\tlines = lines.filter(line => !is_blank(line.line))\n\n\tlines.forEach(function(line)\n\t{\n\t\t// remove single line comments\n\t\tline.line = line.line.replace(/^\\s*\\/\\/.*/, '')\n\t\t// remove any trailing whitespace\n\t\tline.line = line.line.trim()\n\t})\n\n\treturn lines\n}\n\n// takes the whole lines array and splits it by its top-tier child nodes\nfunction split_lines_by_child_nodes(lines)\n{\n\t// determine lines with indentation = 0 (child node entry lines)\n\tconst node_entry_lines = lines.map((line, index) => \n\t{\n\t\treturn { tabs: line.tabs, index }\n\t})\n\t.filter(line => line.tabs === 0)\n\t.map(line => line.index)\n\n\t// deduce corresponding child node ending lines\n\tconst node_ending_lines = node_entry_lines.map(line_index => line_index - 1)\n\tnode_ending_lines.shift()\n\tnode_ending_lines.push(lines.length - 1)\n\n\t// each child node boundaries in terms of starting line index and ending line index\n\tconst from_to = zip(node_entry_lines, node_ending_lines)\n\n\t// now lines are split by child nodes\n\treturn from_to.map(from_to => lines.slice(from_to[0], from_to[1] + 1))\n}\n\n// expand modifier style classes\nfunction expand_modifier_style_classes(node)\n{\n\tconst style = get_node_style(node)\n\tconst pseudo_classes_and_media_queries_and_keyframes = get_node_pseudo_classes_and_media_queries_and_keyframes(node)\n\n\tconst modifiers = Object.keys(node)\n\t\t// get all modifier style class nodes\n\t\t.filter(name => typeof(node[name]) === 'object' && node[name]._is_a_modifier)\n\t\n\t// for each modifier style class node\n\tmodifiers.forEach(function(name)\n\t{\n\t\t// // delete the modifier flags\n\t\t// delete node[name]._is_a_modifier\n\n\t\t// include parent node's styles and pseudo-classes into the modifier style class node\n\t\tnode[name] = extend({}, style, pseudo_classes_and_media_queries_and_keyframes, node[name])\n\n\t\t// expand descendant style class nodes of this modifier\n\t\texpand_modified_subtree(node, node[name])\n\t})\n\t\n\t// for each modifier style class node\n\tmodifiers.forEach(function(name)\n\t{\n\t\t// delete the modifier flags\n\t\tdelete node[name]._is_a_modifier\n\t})\n\n\t// recurse\n\tObject.keys(node)\n\t\t// get all style class nodes\n\t\t.filter(name => typeof(node[name]) === 'object')\n\t\t// for each style class node\n\t\t.forEach(function(name)\n\t\t{\n\t\t\t// recurse\n\t\t\texpand_modifier_style_classes(node[name])\n\t\t})\n\n\treturn node\n}\n\n// extracts root css styles of this style class node\nfunction get_node_style(node)\n{\n\treturn Object.keys(node)\n\t// get all CSS styles of this style class node\n\t.filter(property => typeof(node[property]) !== 'object')\n\t// for each CSS style of this style class node\n\t.reduce(function(style, style_property)\n\t{\n\t\tstyle[style_property] = node[style_property]\n\t\treturn style\n\t}, \n\t{})\n}\n\n// extracts root pseudo-classes and media queries of this style class node\nfunction get_node_pseudo_classes_and_media_queries_and_keyframes(node)\n{\n\treturn Object.keys(node)\n\t// get all child style classes this style class node, \n\t// which aren't modifiers and are a pseudoclass or a media query or keyframes\n\t.filter(property => typeof(node[property]) === 'object' \n\t\t&& (is_pseudo_class(property) || is_media_query(property) || is_keyframes(property))\n\t\t&& !node[property]._is_a_modifier)\n\t// for each child style class of this style class node\n\t.reduce(function(pseudo_classes_and_media_queries_and_keyframes, name)\n\t{\n\t\tpseudo_classes_and_media_queries_and_keyframes[name] = node[name]\n\t\treturn pseudo_classes_and_media_queries_and_keyframes\n\t}, \n\t{})\n}\n\n// for each (non-modifier) child style class of the modifier style class, \n// check if \"this child style class\" is also present \n// as a (non-modifier) \"child of the current style class\".\n// if it is, then extend \"this child style class\" with the style \n// from the \"child of the current style class\".\n// (and repeat recursively)\nfunction expand_modified_subtree(node, modified_node)\n{\n\t// from the modified style class node\n\tObject.keys(modified_node)\n\t// for all non-pseudo-classes and non-media-queries\n\t.filter(name => !is_pseudo_class(name) && !is_media_query(name) && !is_keyframes(name))\n\t// get all non-modifier style class nodes\n\t.filter(name => typeof(modified_node[name]) === 'object' && !modified_node[name]._is_a_modifier)\n\t// which are also present as non-modifier style classes\n\t// in the base style class node\n\t.filter(name => typeof(node[name]) === 'object' && !node[name]._is_a_modifier)\n\n\t// for each such style class node\n\t.forEach(function(name)\n\t{\n\t\t// style of the original style class node\n\t\tconst style = get_node_style(node[name])\n\n\t\t// pseudo-classes of the original style class node\n\t\tconst pseudo_classes_and_media_queries_and_keyframes = get_node_pseudo_classes_and_media_queries_and_keyframes(node[name])\n\n\t\t// mix in the styles\n\t\tmodified_node[name] = extend({}, style, pseudo_classes_and_media_queries_and_keyframes, modified_node[name])\n\n\t\t// recurse\n\t\treturn expand_modified_subtree(node[name], modified_node[name])\n\t})\n}\n\n// checks if this style class name designates a pseudo-class\nexport function is_pseudo_class(name)\n{\n\treturn starts_with(name, ':')\n}\n\n// checks if this style class name is a media query (i.e. @media (...))\nexport function is_media_query(name)\n{\n\treturn starts_with(name, '@media')\n}\n\nexport function is_keyframe_selector(name) \n{\n\treturn ends_with(name, '%') || (name === 'from') || (name === 'to');\n}\n\n\n// checks if this style class name is a media query (i.e. @media (...))\nexport function is_keyframes(name)\n{\n\treturn starts_with(name, '@keyframes')\n}\n\n// style class nesting validation\nfunction validate_child_style_class_types(parent_node_names, names)\n{\n\tfor (let parent of parent_node_names)\n\t{\n\t\t// if it's a pseudoclass, it can't contain any style classes\n\t\tif (is_pseudo_class(parent) && not_empty(names))\n\t\t{\n\t\t\tthrow new Error(`A style class declaration \"${names[0]}\" found inside a pseudoclass \"${parent}\". Pseudoclasses (:hover, etc) can't contain child style classes.`)\n\t\t}\n\n\t\t// if it's a media query style class, it must contain only pseudoclasses\n\t\tif (is_media_query(parent))\n\t\t{\n\t\t\tconst non_pseudoclass = names.filter(x => !is_pseudo_class(x))[0]\n\n\t\t\tif (non_pseudoclass)\n\t\t\t{\n\t\t\t\tthrow new Error(`A non-pseudoclass \"${non_pseudoclass}\" found inside a media query style class \"${parent}\". Media query style classes can only contain pseudoclasses (:hover, etc).`)\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if it's a keyframes style class, it must contain only keyframe selectors\n\t\tif (is_keyframes(parent)) {\n\t\t\tconst non_keyframe_selector = names.filter(x => !is_keyframe_selector(x))[0]\n\n\t\t\tif (non_keyframe_selector) \n\t\t\t{\n\t\t\t\tthrow new Error(`A non-keyframe-selector \"${non_keyframe_selector}\" found inside a keyframes style class \"${parent}\". Keyframes style classes can only contain keyframe selectors (from, 100%, etc).`);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// parse CSS style class\nfunction parse_style_class(lines, node_names)\n{\n\t// separate style lines from children lines\n\tconst { style_lines, children_lines } = split_into_style_lines_and_children_lines(lines)\n\n\t// convert style lines info to just text lines\n\tconst styles = style_lines.map(line => line.line)\n\n\t// using this child node's (or these child nodes') style lines \n\t// and this child node's (or these child nodes') child nodes' lines,\n\t// generate this child node's (or these child nodes') style JSON object\n\t// (this is gonna be a recursion)\n\treturn parse_node_json(styles, children_lines, node_names)\n}"]}