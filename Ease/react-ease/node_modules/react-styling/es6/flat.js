import _Object$keys from 'babel-runtime/core-js/object/keys';
import _getIterator from 'babel-runtime/core-js/get-iterator';
import styler, { is_pseudo_class, is_media_query } from './index';
import { is_object } from './helpers';

// for Radium it flattens the style class hierarchy:
// moves nested style classes to the top of the naming tree
// while prefixing them accordingly
// (except modifiers and media queries)
export default function (strings) {
	for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		values[_key - 1] = arguments[_key];
	}

	var style = styler.apply(this, [strings].concat(values));

	move_up(style);

	return style;
}

// moves child style classes to the surface of the style class tree
// prefixing them accordingly
function move_up(object, upside, new_name) {
	var prefix = void 0;

	if (upside) {
		upside[new_name] = object;
		prefix = new_name + '_';
	} else {
		upside = object;
		prefix = '';
	}

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = _getIterator(_Object$keys(object)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var key = _step.value;

			var child_object = object[key];

			if (is_object(child_object) && !is_pseudo_class(key) && !is_media_query(key)) {
				delete object[key];
				move_up(child_object, upside, '' + prefix + key);
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
}
//# sourceMappingURL=flat.js.map